1-1 For which reason is it better to run the container with a flag -e to give the environment variables rather than put them directly in the Dockerfile?

It is better to use the -e flag to set environment variables when running a container because it allows for greater flexibility and security. 
By using the -e flag, you can easily change the environment variables without needing to modify the Dockerfile and rebuild the image. 
This is particularly useful for sensitive information like database credentials, as it prevents hardcoding them into the Dockerfile, reducing the risk of exposing them in version control systems. 
Additionally, it allows for different configurations in different environments (development, testing, production) without changing the Docker image itself.


1-2 Why do we need a volume to be attached to our postgres container?

A volume is needed to be attached to a Postgres container to ensure data persistence.
Without a volume, any data stored in the container's filesystem would be lost when the container is stopped or removed. 
By using a volume, the data is stored outside the container's lifecycle, allowing it to persist even if the container is recreated. 
This is crucial for databases like Postgres, where data integrity and availability are paramount.


1-3 Document your database container essentials: commands and Dockerfile.

Dockerfile:

FROM postgres:17.2-alpine
ENV POSTGRES_DB=db \
   POSTGRES_USER=usr \
   POSTGRES_PASSWORD=pwd
COPY CreateScheme.sql /docker-entrypoint-initdb.d/01-create-scheme.sql
COPY InsertData.sql /docker-entrypoint-initdb.d/02-insert-data.sql

Commands to build and run the container:

docker build -t mon-postgres -f TP1/Database/Dockerfile .
docker run -d --name postgres-db --network app-network -p 5432:5432 mon-postgres
